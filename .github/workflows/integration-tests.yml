name: Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  # Basic tests that don't require API key
  basic-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run basic tests (structure and parsing)
      run: |
        python test_basic.py
    
    - name: Run smoke tests (functionality without API)
      run: |
        python test_smoke.py
    
    - name: Test help command
      run: |
        python wikipedia_agent.py --help
    
    - name: Test error handling without API key
      run: |
        # Test missing API key error (should fail gracefully)
        if python wikipedia_agent.py "test question" 2>&1 | grep -q "No properly configured LLM provider found"; then
          echo "‚úÖ Properly handles missing API key"
        else
          echo "‚ùå Did not handle missing API key correctly"
          exit 1
        fi
      env:
        GEMINI_API_KEY: ""  # Clear the API key to test error handling
        OPENAI_API_KEY: ""  # Clear all API keys
        AZURE_OPENAI_API_KEY: ""
        HUGGINGFACE_API_KEY: ""

  # Docker integration tests
  docker-tests:
    runs-on: ubuntu-latest
    needs: basic-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
    
    - name: Run Docker integration tests
      run: |
        python test_docker_integration.py

  # Integration tests that require API key
  integration-tests:
    runs-on: ubuntu-latest
    needs: [basic-tests, docker-tests]  # Run after both basic and docker tests pass
    
    # Matrix strategy disabled for now, using latest Python version
    # To re-enable matrix testing, uncomment the strategy block below:
    # strategy:
    #   matrix:
    #     python-version: ['3.9', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        # For matrix strategy, change to: python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Check API key availability
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
        AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
      run: |
        # Check if at least one API key is available
        if [ -n "$GEMINI_API_KEY" ]; then
          echo "‚úÖ GEMINI_API_KEY is available"
          echo "PROVIDER=gemini" >> $GITHUB_ENV
        elif [ -n "$OPENAI_API_KEY" ]; then
          echo "‚úÖ OPENAI_API_KEY is available"
          echo "PROVIDER=openai" >> $GITHUB_ENV
        elif [ -n "$AZURE_OPENAI_API_KEY" ] && [ -n "$AZURE_OPENAI_ENDPOINT" ]; then
          echo "‚úÖ AZURE_OPENAI_API_KEY and AZURE_OPENAI_ENDPOINT are available"
          echo "PROVIDER=azure" >> $GITHUB_ENV  
        else
          echo "‚ùå No API keys available for testing"
          echo "Please add at least one of these secrets:"
          echo "  - GEMINI_API_KEY for Google Gemini"
          echo "  - OPENAI_API_KEY for OpenAI"
          echo "  - AZURE_OPENAI_API_KEY + AZURE_OPENAI_ENDPOINT for Azure OpenAI"
          exit 1
        fi
    
    - name: Run comprehensive integration tests
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
        AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
      run: |
        python test_integration.py
    
    - name: Test documented README examples
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
        AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
      run: |
        # Test examples from README
        echo "Testing README examples with provider: $PROVIDER"
        
        echo "üß™ Testing: Who was the first person to walk on the moon?"
        timeout 90 python wikipedia_agent.py "Who was the first person to walk on the moon?"
        
        echo "üß™ Testing: What is the capital of France?"
        timeout 90 python wikipedia_agent.py "What is the capital of France?"
        
        echo "üß™ Testing: How does photosynthesis work? (with max-iterations)"
        timeout 90 python wikipedia_agent.py --max-iterations 5 "How does photosynthesis work?"
    
    - name: Test CLI parameter variations
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
        AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
      run: |
        echo "Testing CLI parameter variations with provider: $PROVIDER"
        
        # Test with explicit provider and API key parameter
        if [ "$PROVIDER" = "gemini" ]; then
          echo "üß™ Testing --api-key parameter with Gemini"
          timeout 60 python wikipedia_agent.py --provider gemini --api-key "$GEMINI_API_KEY" "What is Python programming language?"
        elif [ "$PROVIDER" = "openai" ]; then
          echo "üß™ Testing --api-key parameter with OpenAI"
          timeout 60 python wikipedia_agent.py --provider openai --api-key "$OPENAI_API_KEY" "What is Python programming language?"
        elif [ "$PROVIDER" = "azure" ]; then
          echo "üß™ Testing --api-key parameter with Azure"
          timeout 60 python wikipedia_agent.py --provider azure --api-key "$AZURE_OPENAI_API_KEY" --azure-endpoint "$AZURE_OPENAI_ENDPOINT" "What is Python programming language?"
        fi
        
        # Test with max-iterations parameter
        echo "üß™ Testing --max-iterations parameter"
        timeout 60 python wikipedia_agent.py --max-iterations 2 "Who invented the telephone?"
        
        # Test combination of parameters with temperature and max-tokens
        echo "üß™ Testing combined parameters including new temperature/max-tokens"
        timeout 60 python wikipedia_agent.py --max-iterations 1 --temperature 0.5 --max-tokens 100 "What is HTML?"
    
    - name: Test edge cases and error scenarios
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
        AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
      run: |
        echo "Testing edge cases with provider: $PROVIDER"
        
        # Test with a very specific question
        echo "üß™ Testing specific question"
        timeout 60 python wikipedia_agent.py "What year did the Berlin Wall fall?"
        
        # Test with a broad question
        echo "üß™ Testing broad question"
        timeout 60 python wikipedia_agent.py --max-iterations 2 "What is artificial intelligence?"
    
    - name: Validate output format
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
        AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
      run: |
        echo "Validating output format with provider: $PROVIDER"
        
        # Run a simple question and check output format
        OUTPUT=$(timeout 60 python wikipedia_agent.py "What is the capital of Italy?" 2>&1)
        
        if echo "$OUTPUT" | grep -q "üìù ANSWER:"; then
          echo "‚úÖ Output contains expected answer section"
        else
          echo "‚ùå Output missing answer section"
          echo "Actual output: $OUTPUT"
          exit 1
        fi
        
        if echo "$OUTPUT" | grep -q "üîç Search terms used:"; then
          echo "‚úÖ Output contains search terms section"
        else
          echo "‚ùå Output missing search terms section"
          echo "Actual output: $OUTPUT"
          exit 1
        fi
        
        # Check that provider is shown in output
        if echo "$OUTPUT" | grep -q "ü§ñ Using.*provider"; then
          echo "‚úÖ Output shows provider information"
        else
          echo "‚ùå Output missing provider information"
          echo "Actual output: $OUTPUT"
          exit 1
        fi
        
        echo "‚úÖ Output format validation passed"
    
    - name: Test all documented features
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
        AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
      run: |
        echo "Testing all documented features from README with provider: $PROVIDER"
        python test_documented_features.py
    
    - name: Performance and reliability tests
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
        AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
      run: |
        echo "Running performance and reliability tests with provider: $PROVIDER"
        
        # Test multiple questions in sequence to ensure stability
        questions=(
          "What is JavaScript?"
          "Who painted the Mona Lisa?"
          "What is the largest planet?"
          "When did World War II end?"
        )
        
        for question in "${questions[@]}"; do
          echo "üß™ Testing: $question"
          if timeout 90 python wikipedia_agent.py --max-iterations 2 "$question"; then
            echo "‚úÖ Success for: $question"
          else
            echo "‚ùå Failed for: $question"
            exit 1
          fi
          sleep 2  # Brief pause between requests
        done
        
        echo "‚úÖ All performance tests passed"